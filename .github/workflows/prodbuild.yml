name: CI/CD
on:
  push:
    branches: [main, dev]
  pull_request:
    types: [opened, synchronize, reopened, closed]
env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  ATABEY_MASTER_U: ${{ secrets.ATABEY_MASTER_U }}
  ATABEY_MASTER_P: ${{ secrets.ATABEY_MASTER_P }}
  ATABEY_URL: ${{ secrets.ATABEY_URL }}
  ATABEY_DB_PORT: ${{ secrets.ATABEY_DB_PORT }}
  ATABEY_DB_NAME: ${{ secrets.ATABEY_DB_NAME }}
#  ECR_REPOSITORY_PREFIX: ${{ secrets.ECR_REPOSITORY_PREFIX }}
#  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
#  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_PREFIX }}-${{ secrets.APP_NAME }}
  IMAGE_TAG: ${{ github.sha }}
jobs:
  build:
    name: CI to Docker Hub
    runs-on: ubuntu-latest
    steps:
  #    # ---[ Configuring AWS credentials and Logging in to ECR ]---
  #    - name: Configure AWS credentials
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #        aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
  #        aws-region: ${{ secrets.AWS_REGION }}
  #    - name: Login to Amazon ECR
  #      id: login-ecr
  #      uses: aws-actions/amazon-ecr-login@v1
      - name: Check Out Repo
        uses: actions/checkout@v2
        with:
          ref: 'main'
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        id: docker_build
        run: |
          docker build --build-arg ATB_U=${ATABEY_MASTER_U} --build-arg ATB_P=${ATABEY_MASTER_P} --build-arg ATB_URL=${ATABEY_URL} --build-arg ATB_DB_PORT=${ATABEY_DB_PORT} --build-arg ATB_DB_NAME=${ATABEY_DB_NAME} -t skynetbot/leave-comment-srv:latest .
          docker push $DOCKER_HUB_USERNAME/leave-comment-srv:$IMAGE_TAG
          docker tag $DOCKER_HUB_USERNAME/leave-comment-srv:$IMAGE_TAG $DOCKER_HUB_USERNAME/leave-comment-srv:latest
          docker push $DOCKER_HUB_USERNAME/leave-comment-srv:latest
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#      - name: Build and push
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#          context: ./
#          file: ./Dockerfile
#          push: true
#          tags: $DOCKER_HUB_USERNAME/leave-comment-srv:latest
#      - name: Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}
  #    - name: Build the image
  #      id: docker_build
  #      run: |
  #        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
  #        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#  analyze:
#    #needs: [build]
#    name: Test Code and Analyze Quality
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11
#      - name: Cache SonarCloud packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#      - name: Cache Maven packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      - name: Build and analyze
        #env:
        #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
        #  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
  #deploy:
  #  # ---[ Use docker image from the build step and deploy on EKS ]---
  #  #needs: [build, analyze]
  #  name: Deploy on EKS
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Deploy to EKS
  #      run: |
  #        aws configure set aws_access_key_id ${{ secrets.EKS_ACCESS_KEY_ID }} --profile p3
  #        aws configure set aws_secret_access_key ${{ secrets.EKS_SECRET_ACCESS_KEY }} --profile p3
  #        aws configure set default.region ${{ secrets.AWS_REGION }} --profile p3
  #        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --profile p3 --name $ECR_REPOSITORY_PREFIX
  #        kubectl --namespace default set image deployment/ro-user-deployment ro-user-service=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #        kubectl --namespace default rollout status deploy/ro-user-deployment
